{
	"info": {
		"_postman_id": "3569cdb2-a550-4293-b8a4-05e32f7fa6e7",
		"name": "Postman_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Проверить, что в body приходит правильный string.",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Спарсить response body в json.",
							"var respVar = pm.response.json();",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"pm.test(\"Check name\", function () {",
							"    pm.expect(respVar.name).to.eql(\"Andrey\");",
							"});",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"pm.test(\"Check age\", function () {",
							"    pm.expect(parseInt(respVar.age)).to.eql(36);",
							"});",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"pm.test(\"Check salary\", function () {",
							"    pm.expect(respVar.salary).to.eql(1000);",
							"});",
							"// 7. Спарсить request.",
							"var reqVar = request.data",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Name resp=req\", function () {",
							"    pm.expect(respVar.name).to.eql(reqVar.name);",
							"});",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Age resp=req\", function () {",
							"    pm.expect(respVar.age).to.eql(reqVar.age);",
							"});",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Salary resp=req\", function () {",
							"    pm.expect(respVar.salary).to.eql(+reqVar.salary);",
							"});",
							"// 11. Вывести в консоль параметр family из response.",
							"var checkFamily = respVar.family",
							"console.log(checkFamily)",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"var respSal = respVar.family.u_salary_1_5_year",
							"var reqSal = reqVar.salary",
							"pm.test(\"Check salary 1_5\", function () {",
							"    pm.expect(respSal).to.eql(reqSal*4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Andrey",
							"type": "text"
						},
						{
							"key": "age",
							"value": "36",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Спарсить response body в json.",
							"var respVar = pm.response.json();",
							"// 4. Спарсить request.",
							"var reqVar = pm.request.url.query.toObject()",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Name resp=req\", function () {",
							"    pm.expect(respVar.name).to.eql(reqVar.name);",
							"});",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Age resp=req\", function () {",
							"    pm.expect(respVar.age).to.eql(reqVar.age);",
							"});",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Salary resp=req\", function () {",
							"    pm.expect(respVar.salary).to.eql(+reqVar.salary);",
							"});",
							"// 8. Вывести в консоль параметр family из response.",
							"console.log(respVar.family)",
							"// 9. Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"Dog have name\", function () {",
							"    pm.expect(respVar.family.pets.dog).to.have.property(\"name\");",
							"});",
							"// 10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"Dog have age\", function () {",
							"    pm.expect(respVar.family.pets.dog).to.have.property(\"age\");",
							"});",
							"// 11. Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"Check name of the dog\", function () {",
							"    pm.expect(respVar.family.pets.dog.name).to.eql(\"Luky\");",
							"});",
							"// 12. Проверить, что параметр age имеет значение 4.",
							"pm.test(\"Check age of the dog\", function () {",
							"    pm.expect(respVar.family.pets.dog.age).to.eql(4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Andrey&age=36&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrey"
						},
						{
							"key": "age",
							"value": "36"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Спарсить response body в json.",
							"var respVar = pm.response.json();",
							"// 4. Спарсить request.",
							"var reqVar = pm.request.url.query.toObject()",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Check name\", function () {",
							"    pm.expect(respVar.name).to.eql(reqVar.name);",
							"});",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"pm.test(\"Check age\", function () {",
							"    pm.expect(respVar.age).to.eql(+reqVar.age);",
							"});",
							"// 7. Вывести в консоль параметр salary из request.",
							"console.log(reqVar.salary)",
							"// 8. Вывести в консоль параметр salary из response.",
							"console.log(respVar.salary)",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log(respVar.salary[0])",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log(+respVar.salary[1])",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(+respVar.salary[2])",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Check salary_0\", function () {",
							"    pm.expect(respVar.salary[0]).to.eql(+reqVar.salary);",
							"});",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Check salary_1\", function () {",
							"    pm.expect(+respVar.salary[1]).to.eql(reqVar.salary*2);",
							"});",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"Check salary_2\", function () {",
							"    pm.expect(+respVar.salary[2]).to.eql(reqVar.salary*3);",
							"});",
							"// 15. Создать в окружении переменную name",
							"// 15. Создать в окружении переменную name",
							"// 16. Создать в окружении переменную age",
							"// 17. Создать в окружении переменную salary",
							"// 18. Передать в окружение переменную name",
							"pm.environment.set(\"name\", reqVar.name);",
							"// 19. Передать в окружение переменную age",
							"pm.environment.set(\"age\", reqVar.age);",
							"// 20. Передать в окружение переменную salary",
							"pm.environment.set(\"salary\", reqVar.salary);",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary",
							"for (var i = 0; i < respVar.salary.length; i++){",
							"    console.log(i, respVar.salary[i])",
							"}",
							"// ===================================================",
							"let rV = respVar.salary",
							"rV.forEach((element, index) => {",
							"    console.log(element, index)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Andrey&age=36&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrey"
						},
						{
							"key": "age",
							"value": "36"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request",
							"// 2. Вставить параметр age из окружения в age",
							"// 3. Вставить параметр name из окружения в name",
							"// 4. Отправить запрос.",
							"// 5. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 6. Спарсить response body в json.",
							"var respVar = pm.response.json();",
							"// 7. Спарсить request.",
							"var reqVar = request.data",
							"// 8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"json_resp_have_start_qa_salary\", function () {",
							"    pm.expect(respVar).to.have.property(\"start_qa_salary\");",
							"});",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"json_resp_have_qa_salary_after_6_months\", function () {",
							"    pm.expect(respVar).to.have.property(\"qa_salary_after_6_months\");",
							"});",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"json_resp_have_qa_salary_after_12_months\", function () {",
							"    pm.expect(respVar).to.have.property(\"qa_salary_after_12_months\");",
							"});",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"json_resp_have_qa_salary_after_1.5_year\", function () {",
							"    pm.expect(respVar).to.have.property(\"qa_salary_after_1.5_year\");",
							"});",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"json_resp_have_qa_salary_after_1.5_year\", function () {",
							"    pm.expect(respVar).to.have.property(\"qa_salary_after_1.5_year\");",
							"});",
							"// 13. Проверить, что json response имеет параметр person",
							"pm.test(\"json_resp_have_person\", function () {",
							"    pm.expect(respVar).to.have.property(\"person\");",
							"});",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"// let reqVar_salary = pm.environment.get(\"salary\");",
							"pm.test(\"start_qa_salary=salary\", function () {",
							"    pm.expect(respVar.start_qa_salary).to.eql(+reqVar.salary);",
							"});",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_6_months=salary*2\", function () {",
							"    pm.expect(respVar.qa_salary_after_6_months).to.eql(+reqVar.salary*2);",
							"});",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_12_months=salary*2.7\", function () {",
							"    pm.expect(respVar.qa_salary_after_12_months).to.eql(+reqVar.salary*2.7);",
							"});",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_1.5_year=salary*3.3\", function () {",
							"    pm.expect(respVar['qa_salary_after_1.5_year']).to.eql(+reqVar.salary*3.3);",
							"});",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_3.5_years=salary*3.8\", function () {",
							"    pm.expect(respVar['qa_salary_after_3.5_years']).to.eql(+reqVar.salary*3.8);",
							"});",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"Check person_u_name_[1]\", function () {",
							"    pm.expect(respVar.person.u_name[1]).to.eql(+reqVar.salary);",
							"});",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"Check person_u_age\", function () {",
							"    pm.expect(respVar.person.u_age).to.eql(+reqVar.age);",
							"});",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"u_salary_5_years=salary*4.2\", function () {",
							"    pm.expect(respVar.person.u_salary_5_years).to.eql(+reqVar.salary*4.2);",
							"});",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"let rV = respVar.person",
							"for(let i in rV){",
							"    console.log(i, respVar.person[i])",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}