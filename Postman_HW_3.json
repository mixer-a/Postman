{
	"info": {
		"_postman_id": "646b0165-da57-4991-819b-3172f7967345",
		"name": "Postman_HW_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "mixer",
							"type": "text"
						},
						{
							"key": "password",
							"value": "qwe",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 2) Проверка структуры json в ответе.",
							"var respVar = pm.response.json();",
							"var schema = {",
							"    \"type\": \"object\",",
							"    \"required\": [\"person\", \"qa_salary_after_12_months\",\"qa_salary_after_6_months\", \"start_qa_salary\"],",
							"    \"properties\": {",
							"        \"person\": {\"type\": \"object\",",
							"            \"required\": [\"u_age\", \"u_name\",\"u_salary_1_5_year\"],",
							"            \"properties\": {",
							"                \"u_age\": {\"type\": \"integer\"},",
							"                \"u_name\": {\"type\": \"array\"},",
							"                \"u_salary_1_5_year\": {\"type\": \"integer\"}",
							"            }",
							"        },",
							"        \"qa_salary_after_12_months\": {\"type\": \"number\"},",
							"        \"qa_salary_after_6_months\": {\"type\": \"integer\"},",
							"        \"start_qa_salary\": {\"type\": \"integer\"}",
							"    }",
							"};",
							"pm.test('Schema is valid', function () {",
							"    var isValidScheme = tv4.validate(respVar, schema, true, true);",
							"    pm.expect(isValidScheme).to.be.true;",
							"});",
							"",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.",
							"var salary = pm.environment.get(\"salary\");",
							"console.log(respVar)",
							"pm.test(\"u_salary_1_5_year\", function () {",
							"    pm.expect(respVar.person.u_salary_1_5_year).to.eql(salary*4);",
							"});",
							"pm.test(\"after_12_months\", function () {",
							"    pm.expect(respVar.qa_salary_after_12_months).to.eql(salary*2.9);",
							"});",
							"pm.test(\"after_6_months\", function () {",
							"    pm.expect(respVar.qa_salary_after_6_months).to.eql(salary*2);",
							"});",
							"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user",
							"let sal_1_5 = respVar.person.u_salary_1_5_year",
							"console.log(sal_1_5)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"age\": {{age}},\n    \"salary\": {{salary}},\n    \"name\": \"{{name}}\",\n    \"auth_token\": \"{{auth_token}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 2) Проверка структуры json в ответе.",
							"var respVar = pm.response.json();",
							"var schema = {",
							"    \"type\": \"object\",",
							"    \"required\": [\"age\", \"name\", \"salary\"],",
							"    \"properties\": {",
							"        \"age\": {\"type\": \"integer\"},",
							"        \"name\": {\"type\": \"string\"},",
							"        \"salary\": {\"type\": \"array\"}",
							"    }",
							"};",
							"pm.test('Schema is valid', function () {",
							"    var isValidScheme = tv4.validate(respVar, schema, true, true);",
							"    pm.expect(isValidScheme).to.be.true;",
							"});",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.",
							"var salary = pm.environment.get(\"salary\");",
							"pm.test(\"salary * 2\", function () {",
							"    pm.expect(+respVar.salary[1]).to.eql(salary*2);",
							"});",
							"",
							"pm.test(\"salary * 3\", function () {",
							"    pm.expect(+respVar.salary[2]).to.eql(salary*3);",
							"});",
							"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го",
							"console.log(respVar.salary)",
							"pm.test(\"salary_2_max\", function () {",
							"    pm.expect(+respVar.salary[0] < +respVar.salary[1] < +respVar.salary[2]).to.eql(true);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 2) Проверка структуры json в ответе.",
							"var respVar = pm.response.json();",
							"var reqVar = request.data",
							"var schema = {",
							"    \"type\": \"object\",",
							"    \"required\": [\"age\", \"daily_food\", \"daily_sleep\", \"name\"],",
							"    \"properties\": {",
							"        \"age\": {\"type\": \"integer\"},",
							"        \"daily_food\": {\"type\": \"number\"},",
							"        \"daily_sleep\": {\"type\": \"number\"},",
							"         \"name\": { \"type\": \"string\"}",
							"    }",
							"};",
							"pm.test('Schema is valid', function () {",
							"    var isValidScheme = tv4.validate(respVar, schema, true, true);",
							"    pm.expect(isValidScheme).to.be.true;",
							"});",
							"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.",
							"pm.test(\"daily_food * k\", function () {",
							"    pm.expect(respVar.daily_food).to.eql(reqVar.weight * 0.012);",
							"});",
							"pm.test(\"daily_sleep * k\", function () {",
							"    pm.expect(respVar.daily_sleep).to.eql(reqVar.weight * 2.5);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "90",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}//test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"",
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 2) Проверка структуры json в ответе.",
							"var respVar = pm.response.json();",
							"var schema = {",
							"   \"type\": \"object\",",
							"   \"required\": [\"age\", \"family\", \"name\", \"salary\"],",
							"   \"properties\": {",
							"        \"age\": {\"type\": \"string\"},",
							"        \"family\": {\"type\": \"object\",",
							"            \"required\": [\"children\", \"u_salary_1_5_year\"],",
							"            \"properties\": {",
							"                \"children\": {\"type\": \"array\"},",
							"                \"u_salary_1_5_year\": {\"type\": \"integer\"}",
							"            }",
							"        },",
							"        \"name\": {\"type\": \"string\"},",
							"        \"salary\": { \"type\": \"integer\"}",
							"   }",
							"};",
							"pm.test('Schema is valid', function () {",
							"    var isValidScheme = tv4.validate(respVar, schema, true, true);",
							"    pm.expect(isValidScheme).to.be.true;",
							"});",
							"// 3) Проверить что занчение поля name = значению переменной name из окружения",
							"pm.test(\"name=name\", function () {",
							"    pm.expect(respVar.name).to.eql(pm.environment.get(\"name\"));",
							"});",
							"// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age",
							"var reqVar = request.data",
							"pm.test(\"age=age\", function () {",
							"    pm.expect(respVar.age).to.eql(reqVar.age);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		}
	]
}